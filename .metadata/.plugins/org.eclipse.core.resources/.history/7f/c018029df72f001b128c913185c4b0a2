	BÖLÜM 1 Constructor injection: 
01	Coach interface'i  ve getDailyWorkout() metot imzası olusturduk.
02	Bu interface'ten implement olan Coach classları olusturduk TrackCoach vs.
03	XML konfigürasyonunda TrackCoach bean'ini tanımladık.(Artık koçlar arasında geçiş yapmak için sadece Buradaki TrackCoach'ı değiştirmemiz yeterli.)
04	HelloSpringApp isminde main class olusturduk.
05	ClassPathXmlApplicationContext ile XML konfigürasyonumuzun ismini belirttik.
06	Coach coach = context.getBean("myCoach", Coach.class); ile Spring container'dan istediğimiz bean'i alıyoruz. myCoach = id Coach.class = sınıf
07	coach.getDailyWorkout() ile istediğimiz metotu bean üzerinden çağırıyoruz.
08	FortuneService interface'i ve getFortune metot imzası olusturduk
09	Bu interface'ten implement olan HappyFortune gibi classlarımızı olusturduk.
10	XML konfigürasyonunda HappyFortune beanini tanımladık. id = myFortune (bkz. madde 3)
11	Coach, Fortune'dan referans alacağı için  <constructor-arg ref="myFortune"/> tanımını kullanıyoruz.
12	TrackCoach üzerinde private FortuneService alanı tanımladık ve constructor'ını oluşturduk.
13	Artık main metot'ta coach.getDailyFortune() yazarak getDailyFortune class'ını direkt coach üzerinden çağırabiliriz. 

	BÖLÜM 2 Setter injection:
01	CricketCoach classına setter injection yapacağız.
02	fortuneService alan adı olusturduk ve no-arg costructor olusturduk.
03	setter olusturduk
04	xml'de myCricketCoach id'li beani olusturduk.
05	property tagı ile setter injection yaptık. name="fortuneService" setFortuneService'i çağıracak. 

	BÖLÜM 3 properties file injection
01	properties dosyası olustur. name=value şeklinde satır satır
02	xml dosyasında <context:property-placeholder location="classpath:dosyaadı.properties"/> ile konfigüre et.
03	EL kullanarak value'leri yaz. ${foo.team}
04	Bundan sonra properties dosyasını değiştirmek yeterli.

BÖLÜM 4 bean scopes and lifecycle
01	bean scope xml file içerisinde tanımlıyoruz. 
02	default olarak singleton. objeleri aynı "memory allocation"'da tutar.
03	scope = prototype , her oluşturulan objeye ayrı bir bellek bölümü açar ve orada tutar. 
04	lifecycle -> container started > bean instantiated (instance) > dependency injection > internal spring processing 
	> custom init method > BEAN READY FOR USE > container.close > custom destroy method > STOP
05	custom init ve destroy method ilgili class icerisinde (mesela Trackcoach) tanımlanıp xml'de init-method ve destroy method attribute'i ile belirtilir. 

BÖLÜM 5 anotasyonlar